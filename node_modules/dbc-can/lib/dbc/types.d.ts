/**
 *
 * Global/generic types for library
 */
export declare type Signal = {
    name: string;
    multiplex: string | null;
    startBit: number;
    length: number;
    endianness: EndianType;
    signed: boolean;
    factor: number;
    offset: number;
    min: number;
    max: number;
    unit: string;
    receivingNodes: string[];
    description: string | null;
    valueTable: ValueTable | null;
    attributes: Attributes;
};
export declare type SignalGroup = {
    name: string;
    id: number;
    groupId: number;
    signals: string[];
};
export declare type Message = {
    name: string;
    id: number;
    dlc: number;
    sendingNode: string | null;
    signals: Map<string, Signal>;
    description: string | null;
    attributes: Attributes;
    signalGroups: Map<string, SignalGroup>;
};
export declare type EnvType = 'Integer' | 'Float' | 'String';
export declare type AccessType = 'Unrestricted' | 'Read' | 'Write' | 'ReadWrite';
export declare type EnvironmentVariable = {
    name: string;
    type: EnvType;
    min: number;
    max: number;
    initalValue: number;
    evId: number;
    accessType: AccessType;
    accessNode: string;
    attributes: Attributes;
    valueTable: ValueTable | null;
    description: string | null;
    dataBytesLength: number | null;
    unit: string;
};
export declare type Node = {
    name: string;
    description: string | null;
    attributes: Attributes;
};
export declare type Tokens = {
    [key: string]: Token;
};
export declare type Token = {
    name: string;
    dataFormat: RegExp;
};
export declare type TxMessages = string[];
export declare type CanId = number;
export declare type NetworkBridges = Map<CanId, TxMessages>;
export declare type DbcData = {
    version: string | null;
    messages: Map<string, Message>;
    description: string | null;
    busSpeed: number | null;
    nodes: Map<string, Node>;
    valueTables: Map<string, ValueTable> | null;
    attributes: Attributes;
    newSymbols: string[];
    environmentVariables: Map<string, EnvironmentVariable>;
    networkBridges: NetworkBridges;
};
export declare type ValueTable = Map<number, string>;
export declare type CanFrame = {
    id: number;
    dlc: number;
    extended: boolean;
    payload: Uint8Array;
};
export declare type Attributes = Map<string, Attribute>;
export declare type AttributeType = 'Global' | 'Message' | 'Signal' | 'Node' | 'EnvironmentVariable';
export declare type AttributeDataType = 'FLOAT' | 'STRING' | 'ENUM' | 'INT' | 'HEX';
export declare type Attribute = {
    name: string;
    type: AttributeType;
    dataType: AttributeDataType;
    value: string | null;
    defaultValue: string | null;
    options: string[] | null;
    min: number | null;
    max: number | null;
};
export interface Config {
    defaultEndianness: string;
    overwriteFile: boolean;
    newFileOnWrite: boolean;
    overwriteMessages: boolean;
    overwriteSignals: boolean;
}
export declare type EndianType = 'Intel' | 'Motorola';
