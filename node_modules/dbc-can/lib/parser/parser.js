"use strict";
/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---
* import { table2Enum, cleanComment, extractAttrType,
* extractAttrNode, extractAttrVal, extractAttrId, extractMinVal,
* extractMaxVal, extractOptions, extractAttrSignalName } from "./parserHelpers";
* ---
* Choice := CanNode | CanMessage | CanSignal | ValTable | Val | SignalComment | MessageComment | NodeComment |
* GlobalAttribute | MessageAttribute | SignalAttribute | NodeAttribute | AttributeDefault | AttributeValue |
* Version | NewSymbolValue | BlankLine | NewSymbol | BusSpeed | Comment | CanEnvironmentVariable | EnvironmentVarData |
* EnvironmentVariableComment | MessageTransmitter | EnvironmentAttribute | EnvironmentVal | CanSignalGroup | SigValType
* BlankLine := ''$
* CanSignalGroup := 'SIG_GROUP_\s+' raw_id={'[0-9]+'} '\s+' name={'[a-zA-Z0-9_]+'} '\s+' raw_group_number={'[0-9]+'} '\s+:\s*' raw_signal_string={'[a-zA-Z0-9_\s]*'} '\s*'
*     .signals = string[] { return raw_signal_string.replace(';', '').split(' '); }
*     .id = number {return parseInt(raw_id,10);}
*     .group_number = number {return parseInt(raw_group_number,10);}
* MessageTransmitter := 'BO_TX_BU_\s+' raw_id={'[0-9]+'} '\s*:\s*' raw_nodes = {'.*'}
*     .id = number {return parseInt(raw_id,10);}
*     .nodes = string[] {return raw_nodes.replace(';', '').split(',');}
* CanEnvironmentVariable := 'EV_\s+' name={'[a-zA-Z0-9_]+'} '\s*:\s*' type={'0|1|2'} '\s+\[' raw_min={'[\-0-9.]+'} '\|' raw_max={'[\-0-9.]+'} '\]\s' raw_unit={'".*"'} '\s+' raw_inital_value={'[\-0-9.]+'} '\s+' raw_ev_id={'[0-9]+'} '\s+' access_type={'[a-zA-Z0-9_]+'} '\s+' node={'[a-zA-Z0-9_]+'}
*     .min = number {return parseFloat(raw_min);}
*     .max = number {return parseFloat(raw_max);}
*     .unit = string {return cleanComment(raw_unit);}
*     .initial_value = number {return parseFloat(raw_inital_value);}
*     .ev_id = number {return parseInt(raw_ev_id,10);}
* EnvironmentVarData := 'ENVVAR_DATA_\s+' name={'[a-zA-Z0-9_]+'} '\s*:\s*' raw_value={'[0-9]+'}
*     .value = number {return parseInt(raw_value);}
* EnvironmentVariableComment := 'CM_ EV_\s+' name={'[a-zA-Z0-9_]+'} '\s' raw_comment={'.*'}
*     .comment = string {return cleanComment(raw_comment);}
* Version := 'VERSION' '\s+' raw_version={'.*'}
*     .version = string {return cleanComment(raw_version);}
* NewSymbol := 'NS_\s*:'
* BusSpeed := 'BS_:'
* NewSymbolValue := '\s+' symbol={'[a-zA-Z_]+_'} '$'?
* CanNode := 'BU_:\s*' raw_node_string={'[a-zA-Z0-9_\s]*'} '\s*' ';'?
*     .node_names = string[] { return raw_node_string.split(' '); }
* CanMessage := 'BO_\s' raw_id={'[0-9]+'} '\s*' name={'[a-zA-Z0-9_]*'} ':\s*' raw_dlc={'[0-9]'} '\s*' node={'[a-zA-Z0-9_]*'}
*     .id = number {return parseInt(raw_id,10);}
*     .dlc = number {return parseInt(raw_dlc,10);}
* CanSignal := '\s*SG_\s' name={'[a-zA-Z0-9_]+'} '\s*' multiplex={'M|[m0-9]*|\s'} '\s*:\s' raw_start_bit={'[0-9]+'} '\|' raw_length={'[0-9]+'} '@' raw_endian={'[1|0]'} raw_signed={'[+|-]'} '\s\(' raw_factor={'[\-0-9.]+'} ',' raw_offset={'[\-0-9.]+'} '\)\s\[' raw_min={'[\-0-9.]+'} '\|' raw_max={'[\-0-9.]+'} '\]\s' raw_unit={'".*"'} '\s' raw_node_str={'.*'}
*     .unit = string {return cleanComment(raw_unit);}
*     .nodes = string[] {return raw_node_str.trim().split(',');}
*     .start_bit = number {return parseInt(raw_start_bit,10);}
*     .length = number {return parseInt(raw_length,10);}
*     .endian = string {return raw_endian === '1' ? 'Intel' : 'Motorola'}
*     .signed = boolean {return raw_signed === '-' ? true : false;}
*     .factor = number {return parseFloat(raw_factor);}
*     .offset = number {return parseFloat(raw_offset);}
*     .min = number {return parseFloat(raw_min);}
*     .max = number {return parseFloat(raw_max);}
* ValTable := 'VAL_TABLE_\s' name={'[a-zA-Z0-9_]+'} '\s' raw_table={'.*'}
*     .enum = Map<number,string> {return table2Enum(raw_table.replace(';',''));}
* Val := 'VAL_\s' raw_id={'[0-9]+'} '\s' name={'[a-zA-Z0-9_]+'} '\s' raw_table={'.*'}
*     .id = number {return parseInt(raw_id,10);}
*     .enum = Map<number,string> {return table2Enum(raw_table.replace(';',''));}
* EnvironmentVal := 'VAL_\s' !'0-9' name={'[a-zA-Z0-9_]+'} '\s' raw_table={'.*'}
*     .enum = Map<number,string> {return table2Enum(raw_table.replace(';',''));}
* Comment := 'CM_\s' !'[SG_|BO_|BU_|EV_]' raw_comment={'.*'}
*     .comment = string {return cleanComment(raw_comment);}
* SignalComment := 'CM_ SG_\s' raw_id={'[0-9]+'} '\s' name={'[a-zA-Z0-9_]+'} '\s' raw_comment={'.*'}
*     .comment = string {return cleanComment(raw_comment);}
*     .id = number {return parseInt(raw_id,10);}
* MessageComment := 'CM_ BO_\s' raw_id={'[0-9]+'} '\s' raw_comment={'.*'}
*     .comment = string {return cleanComment(raw_comment);}
*     .id = number {return parseInt(raw_id,10);}
* NodeComment := 'CM_ BU_\s' name={'[a-zA-Z0-9_]+'} '\s' raw_comment={'.*'}
*     .comment = string {return cleanComment(raw_comment);}
* GlobalAttribute := 'BA_DEF_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' type={'[A-Z]+'} '\s' raw_value={'.*'}
*     .min = number {return extractMinVal(type, raw_value);}
*     .max = number {return extractMaxVal(type, raw_value);}
*     .enum = string[] {return extractOptions(type, raw_value);}
* MessageAttribute := 'BA_DEF_ BO_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' type={'[A-Z]+'} '\s'? raw_value={'.*'}
*     .min = number {return extractMinVal(type, raw_value);}
*     .max = number {return extractMaxVal(type, raw_value);}
*     .enum = string[] {return extractOptions(type, raw_value);}
* EnvironmentAttribute := 'BA_DEF_ EV_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' type={'[A-Z]+'} '\s'? raw_value={'.*'}
*     .min = number {return extractMinVal(type, raw_value);}
*     .max = number {return extractMaxVal(type, raw_value);}
*     .enum = string[] {return extractOptions(type, raw_value);}
* NodeAttribute := 'BA_DEF_ BU_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' type={'[A-Z]+'} '\s'? raw_value={'.*'}
*     .min = number {return extractMinVal(type, raw_value);}
*     .max = number {return extractMaxVal(type, raw_value);}
*     .enum = string[] {return extractOptions(type, raw_value);}
* SignalAttribute := 'BA_DEF_ SG_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' type={'[A-Z]+'} '\s'? raw_value={'.*'}
*     .min = number {return extractMinVal(type, raw_value);}
*     .max = number {return extractMaxVal(type, raw_value);}
*     .enum = string[] {return extractOptions(type, raw_value);}
* AttributeDefault := 'BA_DEF_DEF_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' raw_value={'.*'}
*     .value = string {return cleanComment(raw_value);}
* AttributeValue := 'BA_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' raw={'.*'}
*     .type = string {return extractAttrType(raw);}
*     .node = string {return extractAttrNode(this.type,raw);}
*     .id = number {return parseInt(extractAttrId(this.type,raw),10);}
*     .signal = string {return extractAttrSignalName(this.type,raw);}
*     .value = string {return extractAttrVal(this.type,raw);}
* SigValType := 'SIG_VALTYPE_\s+' raw_id={'[0-9]+'} '\s+' name={'[a-zA-Z0-9_]+'} '\s*:\s*' raw_type={'1|2'}
*     .id = number {return parseInt(raw_id,10);}
*     .type = number {return parseInt(raw_type,10);}
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxErr = exports.parse = exports.Parser = exports.SigValType = exports.AttributeValue = exports.AttributeDefault = exports.SignalAttribute = exports.NodeAttribute = exports.EnvironmentAttribute = exports.MessageAttribute = exports.GlobalAttribute = exports.NodeComment = exports.MessageComment = exports.SignalComment = exports.Comment = exports.EnvironmentVal = exports.Val = exports.ValTable = exports.CanSignal = exports.CanMessage = exports.CanNode = exports.Version = exports.EnvironmentVariableComment = exports.EnvironmentVarData = exports.CanEnvironmentVariable = exports.MessageTransmitter = exports.CanSignalGroup = exports.ASTKinds = void 0;
const parserHelpers_1 = require("./parserHelpers");
var ASTKinds;
(function (ASTKinds) {
    ASTKinds["Choice_1"] = "Choice_1";
    ASTKinds["Choice_2"] = "Choice_2";
    ASTKinds["Choice_3"] = "Choice_3";
    ASTKinds["Choice_4"] = "Choice_4";
    ASTKinds["Choice_5"] = "Choice_5";
    ASTKinds["Choice_6"] = "Choice_6";
    ASTKinds["Choice_7"] = "Choice_7";
    ASTKinds["Choice_8"] = "Choice_8";
    ASTKinds["Choice_9"] = "Choice_9";
    ASTKinds["Choice_10"] = "Choice_10";
    ASTKinds["Choice_11"] = "Choice_11";
    ASTKinds["Choice_12"] = "Choice_12";
    ASTKinds["Choice_13"] = "Choice_13";
    ASTKinds["Choice_14"] = "Choice_14";
    ASTKinds["Choice_15"] = "Choice_15";
    ASTKinds["Choice_16"] = "Choice_16";
    ASTKinds["Choice_17"] = "Choice_17";
    ASTKinds["Choice_18"] = "Choice_18";
    ASTKinds["Choice_19"] = "Choice_19";
    ASTKinds["Choice_20"] = "Choice_20";
    ASTKinds["Choice_21"] = "Choice_21";
    ASTKinds["Choice_22"] = "Choice_22";
    ASTKinds["Choice_23"] = "Choice_23";
    ASTKinds["Choice_24"] = "Choice_24";
    ASTKinds["Choice_25"] = "Choice_25";
    ASTKinds["Choice_26"] = "Choice_26";
    ASTKinds["Choice_27"] = "Choice_27";
    ASTKinds["Choice_28"] = "Choice_28";
    ASTKinds["BlankLine"] = "BlankLine";
    ASTKinds["CanSignalGroup"] = "CanSignalGroup";
    ASTKinds["CanSignalGroup_$0"] = "CanSignalGroup_$0";
    ASTKinds["CanSignalGroup_$1"] = "CanSignalGroup_$1";
    ASTKinds["CanSignalGroup_$2"] = "CanSignalGroup_$2";
    ASTKinds["CanSignalGroup_$3"] = "CanSignalGroup_$3";
    ASTKinds["MessageTransmitter"] = "MessageTransmitter";
    ASTKinds["MessageTransmitter_$0"] = "MessageTransmitter_$0";
    ASTKinds["MessageTransmitter_$1"] = "MessageTransmitter_$1";
    ASTKinds["CanEnvironmentVariable"] = "CanEnvironmentVariable";
    ASTKinds["CanEnvironmentVariable_$0"] = "CanEnvironmentVariable_$0";
    ASTKinds["CanEnvironmentVariable_$1"] = "CanEnvironmentVariable_$1";
    ASTKinds["CanEnvironmentVariable_$2"] = "CanEnvironmentVariable_$2";
    ASTKinds["CanEnvironmentVariable_$3"] = "CanEnvironmentVariable_$3";
    ASTKinds["CanEnvironmentVariable_$4"] = "CanEnvironmentVariable_$4";
    ASTKinds["CanEnvironmentVariable_$5"] = "CanEnvironmentVariable_$5";
    ASTKinds["CanEnvironmentVariable_$6"] = "CanEnvironmentVariable_$6";
    ASTKinds["CanEnvironmentVariable_$7"] = "CanEnvironmentVariable_$7";
    ASTKinds["CanEnvironmentVariable_$8"] = "CanEnvironmentVariable_$8";
    ASTKinds["EnvironmentVarData"] = "EnvironmentVarData";
    ASTKinds["EnvironmentVarData_$0"] = "EnvironmentVarData_$0";
    ASTKinds["EnvironmentVarData_$1"] = "EnvironmentVarData_$1";
    ASTKinds["EnvironmentVariableComment"] = "EnvironmentVariableComment";
    ASTKinds["EnvironmentVariableComment_$0"] = "EnvironmentVariableComment_$0";
    ASTKinds["EnvironmentVariableComment_$1"] = "EnvironmentVariableComment_$1";
    ASTKinds["Version"] = "Version";
    ASTKinds["Version_$0"] = "Version_$0";
    ASTKinds["NewSymbol"] = "NewSymbol";
    ASTKinds["BusSpeed"] = "BusSpeed";
    ASTKinds["NewSymbolValue"] = "NewSymbolValue";
    ASTKinds["NewSymbolValue_$0"] = "NewSymbolValue_$0";
    ASTKinds["CanNode"] = "CanNode";
    ASTKinds["CanNode_$0"] = "CanNode_$0";
    ASTKinds["CanMessage"] = "CanMessage";
    ASTKinds["CanMessage_$0"] = "CanMessage_$0";
    ASTKinds["CanMessage_$1"] = "CanMessage_$1";
    ASTKinds["CanMessage_$2"] = "CanMessage_$2";
    ASTKinds["CanMessage_$3"] = "CanMessage_$3";
    ASTKinds["CanSignal"] = "CanSignal";
    ASTKinds["CanSignal_$0"] = "CanSignal_$0";
    ASTKinds["CanSignal_$1"] = "CanSignal_$1";
    ASTKinds["CanSignal_$2"] = "CanSignal_$2";
    ASTKinds["CanSignal_$3"] = "CanSignal_$3";
    ASTKinds["CanSignal_$4"] = "CanSignal_$4";
    ASTKinds["CanSignal_$5"] = "CanSignal_$5";
    ASTKinds["CanSignal_$6"] = "CanSignal_$6";
    ASTKinds["CanSignal_$7"] = "CanSignal_$7";
    ASTKinds["CanSignal_$8"] = "CanSignal_$8";
    ASTKinds["CanSignal_$9"] = "CanSignal_$9";
    ASTKinds["CanSignal_$10"] = "CanSignal_$10";
    ASTKinds["CanSignal_$11"] = "CanSignal_$11";
    ASTKinds["ValTable"] = "ValTable";
    ASTKinds["ValTable_$0"] = "ValTable_$0";
    ASTKinds["ValTable_$1"] = "ValTable_$1";
    ASTKinds["Val"] = "Val";
    ASTKinds["Val_$0"] = "Val_$0";
    ASTKinds["Val_$1"] = "Val_$1";
    ASTKinds["Val_$2"] = "Val_$2";
    ASTKinds["EnvironmentVal"] = "EnvironmentVal";
    ASTKinds["EnvironmentVal_$0"] = "EnvironmentVal_$0";
    ASTKinds["EnvironmentVal_$1"] = "EnvironmentVal_$1";
    ASTKinds["Comment"] = "Comment";
    ASTKinds["Comment_$0"] = "Comment_$0";
    ASTKinds["SignalComment"] = "SignalComment";
    ASTKinds["SignalComment_$0"] = "SignalComment_$0";
    ASTKinds["SignalComment_$1"] = "SignalComment_$1";
    ASTKinds["SignalComment_$2"] = "SignalComment_$2";
    ASTKinds["MessageComment"] = "MessageComment";
    ASTKinds["MessageComment_$0"] = "MessageComment_$0";
    ASTKinds["MessageComment_$1"] = "MessageComment_$1";
    ASTKinds["NodeComment"] = "NodeComment";
    ASTKinds["NodeComment_$0"] = "NodeComment_$0";
    ASTKinds["NodeComment_$1"] = "NodeComment_$1";
    ASTKinds["GlobalAttribute"] = "GlobalAttribute";
    ASTKinds["GlobalAttribute_$0"] = "GlobalAttribute_$0";
    ASTKinds["GlobalAttribute_$1"] = "GlobalAttribute_$1";
    ASTKinds["GlobalAttribute_$2"] = "GlobalAttribute_$2";
    ASTKinds["MessageAttribute"] = "MessageAttribute";
    ASTKinds["MessageAttribute_$0"] = "MessageAttribute_$0";
    ASTKinds["MessageAttribute_$1"] = "MessageAttribute_$1";
    ASTKinds["MessageAttribute_$2"] = "MessageAttribute_$2";
    ASTKinds["EnvironmentAttribute"] = "EnvironmentAttribute";
    ASTKinds["EnvironmentAttribute_$0"] = "EnvironmentAttribute_$0";
    ASTKinds["EnvironmentAttribute_$1"] = "EnvironmentAttribute_$1";
    ASTKinds["EnvironmentAttribute_$2"] = "EnvironmentAttribute_$2";
    ASTKinds["NodeAttribute"] = "NodeAttribute";
    ASTKinds["NodeAttribute_$0"] = "NodeAttribute_$0";
    ASTKinds["NodeAttribute_$1"] = "NodeAttribute_$1";
    ASTKinds["NodeAttribute_$2"] = "NodeAttribute_$2";
    ASTKinds["SignalAttribute"] = "SignalAttribute";
    ASTKinds["SignalAttribute_$0"] = "SignalAttribute_$0";
    ASTKinds["SignalAttribute_$1"] = "SignalAttribute_$1";
    ASTKinds["SignalAttribute_$2"] = "SignalAttribute_$2";
    ASTKinds["AttributeDefault"] = "AttributeDefault";
    ASTKinds["AttributeDefault_$0"] = "AttributeDefault_$0";
    ASTKinds["AttributeDefault_$1"] = "AttributeDefault_$1";
    ASTKinds["AttributeValue"] = "AttributeValue";
    ASTKinds["AttributeValue_$0"] = "AttributeValue_$0";
    ASTKinds["AttributeValue_$1"] = "AttributeValue_$1";
    ASTKinds["SigValType"] = "SigValType";
    ASTKinds["SigValType_$0"] = "SigValType_$0";
    ASTKinds["SigValType_$1"] = "SigValType_$1";
    ASTKinds["SigValType_$2"] = "SigValType_$2";
    ASTKinds["$EOF"] = "$EOF";
})(ASTKinds = exports.ASTKinds || (exports.ASTKinds = {}));
class CanSignalGroup {
    constructor(raw_id, name, raw_group_number, raw_signal_string) {
        this.kind = ASTKinds.CanSignalGroup;
        this.raw_id = raw_id;
        this.name = name;
        this.raw_group_number = raw_group_number;
        this.raw_signal_string = raw_signal_string;
        this.signals = (() => {
            return raw_signal_string.replace(';', '').split(' ');
        })();
        this.id = (() => {
            return parseInt(raw_id, 10);
        })();
        this.group_number = (() => {
            return parseInt(raw_group_number, 10);
        })();
    }
}
exports.CanSignalGroup = CanSignalGroup;
class MessageTransmitter {
    constructor(raw_id, raw_nodes) {
        this.kind = ASTKinds.MessageTransmitter;
        this.raw_id = raw_id;
        this.raw_nodes = raw_nodes;
        this.id = (() => {
            return parseInt(raw_id, 10);
        })();
        this.nodes = (() => {
            return raw_nodes.replace(';', '').split(',');
        })();
    }
}
exports.MessageTransmitter = MessageTransmitter;
class CanEnvironmentVariable {
    constructor(name, type, raw_min, raw_max, raw_unit, raw_inital_value, raw_ev_id, access_type, node) {
        this.kind = ASTKinds.CanEnvironmentVariable;
        this.name = name;
        this.type = type;
        this.raw_min = raw_min;
        this.raw_max = raw_max;
        this.raw_unit = raw_unit;
        this.raw_inital_value = raw_inital_value;
        this.raw_ev_id = raw_ev_id;
        this.access_type = access_type;
        this.node = node;
        this.min = (() => {
            return parseFloat(raw_min);
        })();
        this.max = (() => {
            return parseFloat(raw_max);
        })();
        this.unit = (() => {
            return (0, parserHelpers_1.cleanComment)(raw_unit);
        })();
        this.initial_value = (() => {
            return parseFloat(raw_inital_value);
        })();
        this.ev_id = (() => {
            return parseInt(raw_ev_id, 10);
        })();
    }
}
exports.CanEnvironmentVariable = CanEnvironmentVariable;
class EnvironmentVarData {
    constructor(name, raw_value) {
        this.kind = ASTKinds.EnvironmentVarData;
        this.name = name;
        this.raw_value = raw_value;
        this.value = (() => {
            return parseInt(raw_value);
        })();
    }
}
exports.EnvironmentVarData = EnvironmentVarData;
class EnvironmentVariableComment {
    constructor(name, raw_comment) {
        this.kind = ASTKinds.EnvironmentVariableComment;
        this.name = name;
        this.raw_comment = raw_comment;
        this.comment = (() => {
            return (0, parserHelpers_1.cleanComment)(raw_comment);
        })();
    }
}
exports.EnvironmentVariableComment = EnvironmentVariableComment;
class Version {
    constructor(raw_version) {
        this.kind = ASTKinds.Version;
        this.raw_version = raw_version;
        this.version = (() => {
            return (0, parserHelpers_1.cleanComment)(raw_version);
        })();
    }
}
exports.Version = Version;
class CanNode {
    constructor(raw_node_string) {
        this.kind = ASTKinds.CanNode;
        this.raw_node_string = raw_node_string;
        this.node_names = (() => {
            return raw_node_string.split(' ');
        })();
    }
}
exports.CanNode = CanNode;
class CanMessage {
    constructor(raw_id, name, raw_dlc, node) {
        this.kind = ASTKinds.CanMessage;
        this.raw_id = raw_id;
        this.name = name;
        this.raw_dlc = raw_dlc;
        this.node = node;
        this.id = (() => {
            return parseInt(raw_id, 10);
        })();
        this.dlc = (() => {
            return parseInt(raw_dlc, 10);
        })();
    }
}
exports.CanMessage = CanMessage;
class CanSignal {
    constructor(name, multiplex, raw_start_bit, raw_length, raw_endian, raw_signed, raw_factor, raw_offset, raw_min, raw_max, raw_unit, raw_node_str) {
        this.kind = ASTKinds.CanSignal;
        this.name = name;
        this.multiplex = multiplex;
        this.raw_start_bit = raw_start_bit;
        this.raw_length = raw_length;
        this.raw_endian = raw_endian;
        this.raw_signed = raw_signed;
        this.raw_factor = raw_factor;
        this.raw_offset = raw_offset;
        this.raw_min = raw_min;
        this.raw_max = raw_max;
        this.raw_unit = raw_unit;
        this.raw_node_str = raw_node_str;
        this.unit = (() => {
            return (0, parserHelpers_1.cleanComment)(raw_unit);
        })();
        this.nodes = (() => {
            return raw_node_str.trim().split(',');
        })();
        this.start_bit = (() => {
            return parseInt(raw_start_bit, 10);
        })();
        this.length = (() => {
            return parseInt(raw_length, 10);
        })();
        this.endian = (() => {
            return raw_endian === '1' ? 'Intel' : 'Motorola';
        })();
        this.signed = (() => {
            return raw_signed === '-' ? true : false;
        })();
        this.factor = (() => {
            return parseFloat(raw_factor);
        })();
        this.offset = (() => {
            return parseFloat(raw_offset);
        })();
        this.min = (() => {
            return parseFloat(raw_min);
        })();
        this.max = (() => {
            return parseFloat(raw_max);
        })();
    }
}
exports.CanSignal = CanSignal;
class ValTable {
    constructor(name, raw_table) {
        this.kind = ASTKinds.ValTable;
        this.name = name;
        this.raw_table = raw_table;
        this.enum = (() => {
            return (0, parserHelpers_1.table2Enum)(raw_table.replace(';', ''));
        })();
    }
}
exports.ValTable = ValTable;
class Val {
    constructor(raw_id, name, raw_table) {
        this.kind = ASTKinds.Val;
        this.raw_id = raw_id;
        this.name = name;
        this.raw_table = raw_table;
        this.id = (() => {
            return parseInt(raw_id, 10);
        })();
        this.enum = (() => {
            return (0, parserHelpers_1.table2Enum)(raw_table.replace(';', ''));
        })();
    }
}
exports.Val = Val;
class EnvironmentVal {
    constructor(name, raw_table) {
        this.kind = ASTKinds.EnvironmentVal;
        this.name = name;
        this.raw_table = raw_table;
        this.enum = (() => {
            return (0, parserHelpers_1.table2Enum)(raw_table.replace(';', ''));
        })();
    }
}
exports.EnvironmentVal = EnvironmentVal;
class Comment {
    constructor(raw_comment) {
        this.kind = ASTKinds.Comment;
        this.raw_comment = raw_comment;
        this.comment = (() => {
            return (0, parserHelpers_1.cleanComment)(raw_comment);
        })();
    }
}
exports.Comment = Comment;
class SignalComment {
    constructor(raw_id, name, raw_comment) {
        this.kind = ASTKinds.SignalComment;
        this.raw_id = raw_id;
        this.name = name;
        this.raw_comment = raw_comment;
        this.comment = (() => {
            return (0, parserHelpers_1.cleanComment)(raw_comment);
        })();
        this.id = (() => {
            return parseInt(raw_id, 10);
        })();
    }
}
exports.SignalComment = SignalComment;
class MessageComment {
    constructor(raw_id, raw_comment) {
        this.kind = ASTKinds.MessageComment;
        this.raw_id = raw_id;
        this.raw_comment = raw_comment;
        this.comment = (() => {
            return (0, parserHelpers_1.cleanComment)(raw_comment);
        })();
        this.id = (() => {
            return parseInt(raw_id, 10);
        })();
    }
}
exports.MessageComment = MessageComment;
class NodeComment {
    constructor(name, raw_comment) {
        this.kind = ASTKinds.NodeComment;
        this.name = name;
        this.raw_comment = raw_comment;
        this.comment = (() => {
            return (0, parserHelpers_1.cleanComment)(raw_comment);
        })();
    }
}
exports.NodeComment = NodeComment;
class GlobalAttribute {
    constructor(name, type, raw_value) {
        this.kind = ASTKinds.GlobalAttribute;
        this.name = name;
        this.type = type;
        this.raw_value = raw_value;
        this.min = (() => {
            return (0, parserHelpers_1.extractMinVal)(type, raw_value);
        })();
        this.max = (() => {
            return (0, parserHelpers_1.extractMaxVal)(type, raw_value);
        })();
        this.enum = (() => {
            return (0, parserHelpers_1.extractOptions)(type, raw_value);
        })();
    }
}
exports.GlobalAttribute = GlobalAttribute;
class MessageAttribute {
    constructor(name, type, raw_value) {
        this.kind = ASTKinds.MessageAttribute;
        this.name = name;
        this.type = type;
        this.raw_value = raw_value;
        this.min = (() => {
            return (0, parserHelpers_1.extractMinVal)(type, raw_value);
        })();
        this.max = (() => {
            return (0, parserHelpers_1.extractMaxVal)(type, raw_value);
        })();
        this.enum = (() => {
            return (0, parserHelpers_1.extractOptions)(type, raw_value);
        })();
    }
}
exports.MessageAttribute = MessageAttribute;
class EnvironmentAttribute {
    constructor(name, type, raw_value) {
        this.kind = ASTKinds.EnvironmentAttribute;
        this.name = name;
        this.type = type;
        this.raw_value = raw_value;
        this.min = (() => {
            return (0, parserHelpers_1.extractMinVal)(type, raw_value);
        })();
        this.max = (() => {
            return (0, parserHelpers_1.extractMaxVal)(type, raw_value);
        })();
        this.enum = (() => {
            return (0, parserHelpers_1.extractOptions)(type, raw_value);
        })();
    }
}
exports.EnvironmentAttribute = EnvironmentAttribute;
class NodeAttribute {
    constructor(name, type, raw_value) {
        this.kind = ASTKinds.NodeAttribute;
        this.name = name;
        this.type = type;
        this.raw_value = raw_value;
        this.min = (() => {
            return (0, parserHelpers_1.extractMinVal)(type, raw_value);
        })();
        this.max = (() => {
            return (0, parserHelpers_1.extractMaxVal)(type, raw_value);
        })();
        this.enum = (() => {
            return (0, parserHelpers_1.extractOptions)(type, raw_value);
        })();
    }
}
exports.NodeAttribute = NodeAttribute;
class SignalAttribute {
    constructor(name, type, raw_value) {
        this.kind = ASTKinds.SignalAttribute;
        this.name = name;
        this.type = type;
        this.raw_value = raw_value;
        this.min = (() => {
            return (0, parserHelpers_1.extractMinVal)(type, raw_value);
        })();
        this.max = (() => {
            return (0, parserHelpers_1.extractMaxVal)(type, raw_value);
        })();
        this.enum = (() => {
            return (0, parserHelpers_1.extractOptions)(type, raw_value);
        })();
    }
}
exports.SignalAttribute = SignalAttribute;
class AttributeDefault {
    constructor(name, raw_value) {
        this.kind = ASTKinds.AttributeDefault;
        this.name = name;
        this.raw_value = raw_value;
        this.value = (() => {
            return (0, parserHelpers_1.cleanComment)(raw_value);
        })();
    }
}
exports.AttributeDefault = AttributeDefault;
class AttributeValue {
    constructor(name, raw) {
        this.kind = ASTKinds.AttributeValue;
        this.name = name;
        this.raw = raw;
        this.type = (() => {
            return (0, parserHelpers_1.extractAttrType)(raw);
        })();
        this.node = (() => {
            return (0, parserHelpers_1.extractAttrNode)(this.type, raw);
        })();
        this.id = (() => {
            return parseInt((0, parserHelpers_1.extractAttrId)(this.type, raw), 10);
        })();
        this.signal = (() => {
            return (0, parserHelpers_1.extractAttrSignalName)(this.type, raw);
        })();
        this.value = (() => {
            return (0, parserHelpers_1.extractAttrVal)(this.type, raw);
        })();
    }
}
exports.AttributeValue = AttributeValue;
class SigValType {
    constructor(raw_id, name, raw_type) {
        this.kind = ASTKinds.SigValType;
        this.raw_id = raw_id;
        this.name = name;
        this.raw_type = raw_type;
        this.id = (() => {
            return parseInt(raw_id, 10);
        })();
        this.type = (() => {
            return parseInt(raw_type, 10);
        })();
    }
}
exports.SigValType = SigValType;
class Parser {
    constructor(input) {
        this.negating = false;
        this.memoSafe = true;
        this.pos = { overallPos: 0, line: 1, offset: 0 };
        this.input = input;
    }
    reset(pos) {
        this.pos = pos;
    }
    finished() {
        return this.pos.overallPos === this.input.length;
    }
    clearMemos() {
    }
    matchChoice($$dpth, $$cr) {
        return this.choice([
            () => this.matchChoice_1($$dpth + 1, $$cr),
            () => this.matchChoice_2($$dpth + 1, $$cr),
            () => this.matchChoice_3($$dpth + 1, $$cr),
            () => this.matchChoice_4($$dpth + 1, $$cr),
            () => this.matchChoice_5($$dpth + 1, $$cr),
            () => this.matchChoice_6($$dpth + 1, $$cr),
            () => this.matchChoice_7($$dpth + 1, $$cr),
            () => this.matchChoice_8($$dpth + 1, $$cr),
            () => this.matchChoice_9($$dpth + 1, $$cr),
            () => this.matchChoice_10($$dpth + 1, $$cr),
            () => this.matchChoice_11($$dpth + 1, $$cr),
            () => this.matchChoice_12($$dpth + 1, $$cr),
            () => this.matchChoice_13($$dpth + 1, $$cr),
            () => this.matchChoice_14($$dpth + 1, $$cr),
            () => this.matchChoice_15($$dpth + 1, $$cr),
            () => this.matchChoice_16($$dpth + 1, $$cr),
            () => this.matchChoice_17($$dpth + 1, $$cr),
            () => this.matchChoice_18($$dpth + 1, $$cr),
            () => this.matchChoice_19($$dpth + 1, $$cr),
            () => this.matchChoice_20($$dpth + 1, $$cr),
            () => this.matchChoice_21($$dpth + 1, $$cr),
            () => this.matchChoice_22($$dpth + 1, $$cr),
            () => this.matchChoice_23($$dpth + 1, $$cr),
            () => this.matchChoice_24($$dpth + 1, $$cr),
            () => this.matchChoice_25($$dpth + 1, $$cr),
            () => this.matchChoice_26($$dpth + 1, $$cr),
            () => this.matchChoice_27($$dpth + 1, $$cr),
            () => this.matchChoice_28($$dpth + 1, $$cr),
        ]);
    }
    matchChoice_1($$dpth, $$cr) {
        return this.matchCanNode($$dpth + 1, $$cr);
    }
    matchChoice_2($$dpth, $$cr) {
        return this.matchCanMessage($$dpth + 1, $$cr);
    }
    matchChoice_3($$dpth, $$cr) {
        return this.matchCanSignal($$dpth + 1, $$cr);
    }
    matchChoice_4($$dpth, $$cr) {
        return this.matchValTable($$dpth + 1, $$cr);
    }
    matchChoice_5($$dpth, $$cr) {
        return this.matchVal($$dpth + 1, $$cr);
    }
    matchChoice_6($$dpth, $$cr) {
        return this.matchSignalComment($$dpth + 1, $$cr);
    }
    matchChoice_7($$dpth, $$cr) {
        return this.matchMessageComment($$dpth + 1, $$cr);
    }
    matchChoice_8($$dpth, $$cr) {
        return this.matchNodeComment($$dpth + 1, $$cr);
    }
    matchChoice_9($$dpth, $$cr) {
        return this.matchGlobalAttribute($$dpth + 1, $$cr);
    }
    matchChoice_10($$dpth, $$cr) {
        return this.matchMessageAttribute($$dpth + 1, $$cr);
    }
    matchChoice_11($$dpth, $$cr) {
        return this.matchSignalAttribute($$dpth + 1, $$cr);
    }
    matchChoice_12($$dpth, $$cr) {
        return this.matchNodeAttribute($$dpth + 1, $$cr);
    }
    matchChoice_13($$dpth, $$cr) {
        return this.matchAttributeDefault($$dpth + 1, $$cr);
    }
    matchChoice_14($$dpth, $$cr) {
        return this.matchAttributeValue($$dpth + 1, $$cr);
    }
    matchChoice_15($$dpth, $$cr) {
        return this.matchVersion($$dpth + 1, $$cr);
    }
    matchChoice_16($$dpth, $$cr) {
        return this.matchNewSymbolValue($$dpth + 1, $$cr);
    }
    matchChoice_17($$dpth, $$cr) {
        return this.matchBlankLine($$dpth + 1, $$cr);
    }
    matchChoice_18($$dpth, $$cr) {
        return this.matchNewSymbol($$dpth + 1, $$cr);
    }
    matchChoice_19($$dpth, $$cr) {
        return this.matchBusSpeed($$dpth + 1, $$cr);
    }
    matchChoice_20($$dpth, $$cr) {
        return this.matchComment($$dpth + 1, $$cr);
    }
    matchChoice_21($$dpth, $$cr) {
        return this.matchCanEnvironmentVariable($$dpth + 1, $$cr);
    }
    matchChoice_22($$dpth, $$cr) {
        return this.matchEnvironmentVarData($$dpth + 1, $$cr);
    }
    matchChoice_23($$dpth, $$cr) {
        return this.matchEnvironmentVariableComment($$dpth + 1, $$cr);
    }
    matchChoice_24($$dpth, $$cr) {
        return this.matchMessageTransmitter($$dpth + 1, $$cr);
    }
    matchChoice_25($$dpth, $$cr) {
        return this.matchEnvironmentAttribute($$dpth + 1, $$cr);
    }
    matchChoice_26($$dpth, $$cr) {
        return this.matchEnvironmentVal($$dpth + 1, $$cr);
    }
    matchChoice_27($$dpth, $$cr) {
        return this.matchCanSignalGroup($$dpth + 1, $$cr);
    }
    matchChoice_28($$dpth, $$cr) {
        return this.matchSigValType($$dpth + 1, $$cr);
    }
    matchBlankLine($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:)`, $$dpth + 1, $$cr) !== null
                && this.match$EOF($$cr) !== null) {
                $$res = { kind: ASTKinds.BlankLine, };
            }
            return $$res;
        });
    }
    matchCanSignalGroup($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$raw_id;
            let $scope$name;
            let $scope$raw_group_number;
            let $scope$raw_signal_string;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:SIG_GROUP_\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_id = this.matchCanSignalGroup_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchCanSignalGroup_$1($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_group_number = this.matchCanSignalGroup_$2($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s+:\s*)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_signal_string = this.matchCanSignalGroup_$3($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s*)`, $$dpth + 1, $$cr) !== null) {
                $$res = new CanSignalGroup($scope$raw_id, $scope$name, $scope$raw_group_number, $scope$raw_signal_string);
            }
            return $$res;
        });
    }
    matchCanSignalGroup_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchCanSignalGroup_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchCanSignalGroup_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchCanSignalGroup_$3($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_\s]*)`, $$dpth + 1, $$cr);
    }
    matchMessageTransmitter($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$raw_id;
            let $scope$raw_nodes;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:BO_TX_BU_\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_id = this.matchMessageTransmitter_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_nodes = this.matchMessageTransmitter_$1($$dpth + 1, $$cr)) !== null) {
                $$res = new MessageTransmitter($scope$raw_id, $scope$raw_nodes);
            }
            return $$res;
        });
    }
    matchMessageTransmitter_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchMessageTransmitter_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchCanEnvironmentVariable($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$type;
            let $scope$raw_min;
            let $scope$raw_max;
            let $scope$raw_unit;
            let $scope$raw_inital_value;
            let $scope$raw_ev_id;
            let $scope$access_type;
            let $scope$node;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:EV_\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchCanEnvironmentVariable_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                && ($scope$type = this.matchCanEnvironmentVariable_$1($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s+\[)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_min = this.matchCanEnvironmentVariable_$2($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\|)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_max = this.matchCanEnvironmentVariable_$3($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\]\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_unit = this.matchCanEnvironmentVariable_$4($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_inital_value = this.matchCanEnvironmentVariable_$5($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_ev_id = this.matchCanEnvironmentVariable_$6($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$access_type = this.matchCanEnvironmentVariable_$7($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$node = this.matchCanEnvironmentVariable_$8($$dpth + 1, $$cr)) !== null) {
                $$res = new CanEnvironmentVariable($scope$name, $scope$type, $scope$raw_min, $scope$raw_max, $scope$raw_unit, $scope$raw_inital_value, $scope$raw_ev_id, $scope$access_type, $scope$node);
            }
            return $$res;
        });
    }
    matchCanEnvironmentVariable_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchCanEnvironmentVariable_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:0|1|2)`, $$dpth + 1, $$cr);
    }
    matchCanEnvironmentVariable_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    matchCanEnvironmentVariable_$3($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    matchCanEnvironmentVariable_$4($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:".*")`, $$dpth + 1, $$cr);
    }
    matchCanEnvironmentVariable_$5($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    matchCanEnvironmentVariable_$6($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchCanEnvironmentVariable_$7($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchCanEnvironmentVariable_$8($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchEnvironmentVarData($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$raw_value;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:ENVVAR_DATA_\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchEnvironmentVarData_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_value = this.matchEnvironmentVarData_$1($$dpth + 1, $$cr)) !== null) {
                $$res = new EnvironmentVarData($scope$name, $scope$raw_value);
            }
            return $$res;
        });
    }
    matchEnvironmentVarData_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchEnvironmentVarData_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchEnvironmentVariableComment($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$raw_comment;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:CM_ EV_\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchEnvironmentVariableComment_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_comment = this.matchEnvironmentVariableComment_$1($$dpth + 1, $$cr)) !== null) {
                $$res = new EnvironmentVariableComment($scope$name, $scope$raw_comment);
            }
            return $$res;
        });
    }
    matchEnvironmentVariableComment_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchEnvironmentVariableComment_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchVersion($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$raw_version;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:VERSION)`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_version = this.matchVersion_$0($$dpth + 1, $$cr)) !== null) {
                $$res = new Version($scope$raw_version);
            }
            return $$res;
        });
    }
    matchVersion_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchNewSymbol($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:NS_\s*:)`, $$dpth + 1, $$cr);
    }
    matchBusSpeed($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:BS_:)`, $$dpth + 1, $$cr);
    }
    matchNewSymbolValue($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$symbol;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$symbol = this.matchNewSymbolValue_$0($$dpth + 1, $$cr)) !== null
                && ((this.regexAccept(String.raw `(?:$)`, $$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.NewSymbolValue, symbol: $scope$symbol };
            }
            return $$res;
        });
    }
    matchNewSymbolValue_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z_]+_)`, $$dpth + 1, $$cr);
    }
    matchCanNode($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$raw_node_string;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:BU_:\s*)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_node_string = this.matchCanNode_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s*)`, $$dpth + 1, $$cr) !== null
                && ((this.regexAccept(String.raw `(?:;)`, $$dpth + 1, $$cr)) || true)) {
                $$res = new CanNode($scope$raw_node_string);
            }
            return $$res;
        });
    }
    matchCanNode_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_\s]*)`, $$dpth + 1, $$cr);
    }
    matchCanMessage($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$raw_id;
            let $scope$name;
            let $scope$raw_dlc;
            let $scope$node;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:BO_\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_id = this.matchCanMessage_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s*)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchCanMessage_$1($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?::\s*)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_dlc = this.matchCanMessage_$2($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s*)`, $$dpth + 1, $$cr) !== null
                && ($scope$node = this.matchCanMessage_$3($$dpth + 1, $$cr)) !== null) {
                $$res = new CanMessage($scope$raw_id, $scope$name, $scope$raw_dlc, $scope$node);
            }
            return $$res;
        });
    }
    matchCanMessage_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchCanMessage_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]*)`, $$dpth + 1, $$cr);
    }
    matchCanMessage_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9])`, $$dpth + 1, $$cr);
    }
    matchCanMessage_$3($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]*)`, $$dpth + 1, $$cr);
    }
    matchCanSignal($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$multiplex;
            let $scope$raw_start_bit;
            let $scope$raw_length;
            let $scope$raw_endian;
            let $scope$raw_signed;
            let $scope$raw_factor;
            let $scope$raw_offset;
            let $scope$raw_min;
            let $scope$raw_max;
            let $scope$raw_unit;
            let $scope$raw_node_str;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\s*SG_\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchCanSignal_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s*)`, $$dpth + 1, $$cr) !== null
                && ($scope$multiplex = this.matchCanSignal_$1($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s*:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_start_bit = this.matchCanSignal_$2($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\|)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_length = this.matchCanSignal_$3($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:@)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_endian = this.matchCanSignal_$4($$dpth + 1, $$cr)) !== null
                && ($scope$raw_signed = this.matchCanSignal_$5($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s\()`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_factor = this.matchCanSignal_$6($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:,)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_offset = this.matchCanSignal_$7($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\)\s\[)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_min = this.matchCanSignal_$8($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\|)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_max = this.matchCanSignal_$9($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\]\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_unit = this.matchCanSignal_$10($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_node_str = this.matchCanSignal_$11($$dpth + 1, $$cr)) !== null) {
                $$res = new CanSignal($scope$name, $scope$multiplex, $scope$raw_start_bit, $scope$raw_length, $scope$raw_endian, $scope$raw_signed, $scope$raw_factor, $scope$raw_offset, $scope$raw_min, $scope$raw_max, $scope$raw_unit, $scope$raw_node_str);
            }
            return $$res;
        });
    }
    matchCanSignal_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:M|[m0-9]*|\s)`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$3($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$4($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[1|0])`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$5($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[+|-])`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$6($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$7($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$8($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$9($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$10($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:".*")`, $$dpth + 1, $$cr);
    }
    matchCanSignal_$11($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchValTable($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$raw_table;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:VAL_TABLE_\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchValTable_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_table = this.matchValTable_$1($$dpth + 1, $$cr)) !== null) {
                $$res = new ValTable($scope$name, $scope$raw_table);
            }
            return $$res;
        });
    }
    matchValTable_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchValTable_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchVal($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$raw_id;
            let $scope$name;
            let $scope$raw_table;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:VAL_\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_id = this.matchVal_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchVal_$1($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_table = this.matchVal_$2($$dpth + 1, $$cr)) !== null) {
                $$res = new Val($scope$raw_id, $scope$name, $scope$raw_table);
            }
            return $$res;
        });
    }
    matchVal_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchVal_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchVal_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchEnvironmentVal($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$raw_table;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:VAL_\s)`, $$dpth + 1, $$cr) !== null
                && this.negate(() => this.regexAccept(String.raw `(?:0-9)`, $$dpth + 1, $$cr)) !== null
                && ($scope$name = this.matchEnvironmentVal_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_table = this.matchEnvironmentVal_$1($$dpth + 1, $$cr)) !== null) {
                $$res = new EnvironmentVal($scope$name, $scope$raw_table);
            }
            return $$res;
        });
    }
    matchEnvironmentVal_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchEnvironmentVal_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchComment($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$raw_comment;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:CM_\s)`, $$dpth + 1, $$cr) !== null
                && this.negate(() => this.regexAccept(String.raw `(?:[SG_|BO_|BU_|EV_])`, $$dpth + 1, $$cr)) !== null
                && ($scope$raw_comment = this.matchComment_$0($$dpth + 1, $$cr)) !== null) {
                $$res = new Comment($scope$raw_comment);
            }
            return $$res;
        });
    }
    matchComment_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchSignalComment($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$raw_id;
            let $scope$name;
            let $scope$raw_comment;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:CM_ SG_\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_id = this.matchSignalComment_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchSignalComment_$1($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_comment = this.matchSignalComment_$2($$dpth + 1, $$cr)) !== null) {
                $$res = new SignalComment($scope$raw_id, $scope$name, $scope$raw_comment);
            }
            return $$res;
        });
    }
    matchSignalComment_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchSignalComment_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchSignalComment_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchMessageComment($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$raw_id;
            let $scope$raw_comment;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:CM_ BO_\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_id = this.matchMessageComment_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_comment = this.matchMessageComment_$1($$dpth + 1, $$cr)) !== null) {
                $$res = new MessageComment($scope$raw_id, $scope$raw_comment);
            }
            return $$res;
        });
    }
    matchMessageComment_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchMessageComment_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchNodeComment($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$raw_comment;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:CM_ BU_\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchNodeComment_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_comment = this.matchNodeComment_$1($$dpth + 1, $$cr)) !== null) {
                $$res = new NodeComment($scope$name, $scope$raw_comment);
            }
            return $$res;
        });
    }
    matchNodeComment_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchNodeComment_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchGlobalAttribute($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$type;
            let $scope$raw_value;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:BA_DEF_\s+)`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchGlobalAttribute_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$type = this.matchGlobalAttribute_$1($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_value = this.matchGlobalAttribute_$2($$dpth + 1, $$cr)) !== null) {
                $$res = new GlobalAttribute($scope$name, $scope$type, $scope$raw_value);
            }
            return $$res;
        });
    }
    matchGlobalAttribute_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchGlobalAttribute_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[A-Z]+)`, $$dpth + 1, $$cr);
    }
    matchGlobalAttribute_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchMessageAttribute($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$type;
            let $scope$raw_value;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:BA_DEF_ BO_\s+)`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchMessageAttribute_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$type = this.matchMessageAttribute_$1($$dpth + 1, $$cr)) !== null
                && ((this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr)) || true)
                && ($scope$raw_value = this.matchMessageAttribute_$2($$dpth + 1, $$cr)) !== null) {
                $$res = new MessageAttribute($scope$name, $scope$type, $scope$raw_value);
            }
            return $$res;
        });
    }
    matchMessageAttribute_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchMessageAttribute_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[A-Z]+)`, $$dpth + 1, $$cr);
    }
    matchMessageAttribute_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchEnvironmentAttribute($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$type;
            let $scope$raw_value;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:BA_DEF_ EV_\s+)`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchEnvironmentAttribute_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$type = this.matchEnvironmentAttribute_$1($$dpth + 1, $$cr)) !== null
                && ((this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr)) || true)
                && ($scope$raw_value = this.matchEnvironmentAttribute_$2($$dpth + 1, $$cr)) !== null) {
                $$res = new EnvironmentAttribute($scope$name, $scope$type, $scope$raw_value);
            }
            return $$res;
        });
    }
    matchEnvironmentAttribute_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchEnvironmentAttribute_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[A-Z]+)`, $$dpth + 1, $$cr);
    }
    matchEnvironmentAttribute_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchNodeAttribute($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$type;
            let $scope$raw_value;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:BA_DEF_ BU_\s+)`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchNodeAttribute_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$type = this.matchNodeAttribute_$1($$dpth + 1, $$cr)) !== null
                && ((this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr)) || true)
                && ($scope$raw_value = this.matchNodeAttribute_$2($$dpth + 1, $$cr)) !== null) {
                $$res = new NodeAttribute($scope$name, $scope$type, $scope$raw_value);
            }
            return $$res;
        });
    }
    matchNodeAttribute_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchNodeAttribute_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[A-Z]+)`, $$dpth + 1, $$cr);
    }
    matchNodeAttribute_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchSignalAttribute($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$type;
            let $scope$raw_value;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:BA_DEF_ SG_\s+)`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchSignalAttribute_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$type = this.matchSignalAttribute_$1($$dpth + 1, $$cr)) !== null
                && ((this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr)) || true)
                && ($scope$raw_value = this.matchSignalAttribute_$2($$dpth + 1, $$cr)) !== null) {
                $$res = new SignalAttribute($scope$name, $scope$type, $scope$raw_value);
            }
            return $$res;
        });
    }
    matchSignalAttribute_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchSignalAttribute_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[A-Z]+)`, $$dpth + 1, $$cr);
    }
    matchSignalAttribute_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchAttributeDefault($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$raw_value;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:BA_DEF_DEF_\s+)`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchAttributeDefault_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_value = this.matchAttributeDefault_$1($$dpth + 1, $$cr)) !== null) {
                $$res = new AttributeDefault($scope$name, $scope$raw_value);
            }
            return $$res;
        });
    }
    matchAttributeDefault_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchAttributeDefault_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchAttributeValue($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$raw;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:BA_\s+)`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchAttributeValue_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:")`, $$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\s)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw = this.matchAttributeValue_$1($$dpth + 1, $$cr)) !== null) {
                $$res = new AttributeValue($scope$name, $scope$raw);
            }
            return $$res;
        });
    }
    matchAttributeValue_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchAttributeValue_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:.*)`, $$dpth + 1, $$cr);
    }
    matchSigValType($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$raw_id;
            let $scope$name;
            let $scope$raw_type;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:SIG_VALTYPE_\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_id = this.matchSigValType_$0($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s+)`, $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchSigValType_$1($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                && ($scope$raw_type = this.matchSigValType_$2($$dpth + 1, $$cr)) !== null) {
                $$res = new SigValType($scope$raw_id, $scope$name, $scope$raw_type);
            }
            return $$res;
        });
    }
    matchSigValType_$0($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    matchSigValType_$1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    matchSigValType_$2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:1|2)`, $$dpth + 1, $$cr);
    }
    test() {
        const mrk = this.mark();
        const res = this.matchChoice(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    parse() {
        const mrk = this.mark();
        const res = this.matchChoice(0);
        if (res)
            return { ast: res, errs: [] };
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchChoice(0, rec);
        const err = rec.getErr();
        return { ast: res, errs: err !== null ? [err] : [] };
    }
    mark() {
        return this.pos;
    }
    loop(func, star = false) {
        const mrk = this.mark();
        const res = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    run($$dpth, fn) {
        const mrk = this.mark();
        const res = fn();
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    choice(fns) {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    regexAccept(match, dpth, cr) {
        return this.run(dpth, () => {
            const reg = new RegExp(match, "y");
            const mrk = this.mark();
            reg.lastIndex = mrk.overallPos;
            const res = this.tryConsume(reg);
            if (cr) {
                cr.record(mrk, res, {
                    kind: "RegexMatch",
                    // We substring from 3 to len - 1 to strip off the
                    // non-capture group syntax added as a WebKit workaround
                    literal: match.substring(3, match.length - 1),
                    negated: this.negating,
                });
            }
            return res;
        });
    }
    tryConsume(reg) {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    noConsume(fn) {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    negate(fn) {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    memoise(rule, memo) {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if (this.memoSafe && $scope$memoRes !== undefined) {
            this.reset($scope$memoRes[1]);
            return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if (this.memoSafe)
            memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    match$EOF(et) {
        const res = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if (et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
exports.Parser = Parser;
function parse(s) {
    const p = new Parser(s);
    return p.parse();
}
exports.parse = parse;
class SyntaxErr {
    constructor(pos, expmatches) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    toString() {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ' : ''}'${x.literal}'`)}`;
    }
}
exports.SyntaxErr = SyntaxErr;
class ErrorTracker {
    constructor() {
        this.mxpos = { overallPos: -1, line: -1, offset: -1 };
        this.regexset = new Set();
        this.pmatches = [];
    }
    record(pos, result, att) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if (att.kind === "RegexMatch") {
                if (!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            }
            else {
                this.pmatches.push(att);
            }
        }
    }
    getErr() {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}
//# sourceMappingURL=parser.js.map